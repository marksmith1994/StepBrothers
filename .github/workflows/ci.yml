name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  # Frontend Job
  frontend:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
        
    - name: Install frontend dependencies
      working-directory: frontend
      run: npm ci --legacy-peer-deps
      
    - name: Run frontend linting
      working-directory: frontend
      run: npm run lint
      
    - name: Run frontend type checking
      working-directory: frontend
      run: npm run type-check
      
    - name: Build frontend
      working-directory: frontend
      run: npm run build
      
    - name: Upload frontend build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: frontend-build
        path: frontend/dist
        retention-days: 1

  # Backend Job
  backend:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'
        
    - name: Restore backend dependencies
      working-directory: backend
      run: dotnet restore
      
    - name: Build backend
      working-directory: backend
      run: dotnet build --no-restore --configuration Release
      
    - name: Run backend tests
      working-directory: tests
      run: dotnet test --no-build --verbosity normal --configuration Release
      
    - name: Upload backend build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: backend-build
        path: backend/bin/Release/net8.0
        retention-days: 1

  # Integration Tests
  integration:
    runs-on: ubuntu-latest
    needs: [frontend, backend]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download frontend artifacts
      uses: actions/download-artifact@v4
      with:
        name: frontend-build
        path: frontend/dist
        
    - name: Download backend artifacts
      uses: actions/download-artifact@v4
      with:
        name: backend-build
        path: backend/bin/Release/net8.0
        
    - name: Setup Node.js for integration tests
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
        
    - name: Install frontend dependencies for testing
      working-directory: frontend
      run: npm ci --legacy-peer-deps
      
    - name: Run frontend tests (if available)
      working-directory: frontend
      run: npm test --if-present
      continue-on-error: true

  # Security Scan
  security:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Deploy to Staging (on main branch)
  deploy-staging:
    runs-on: ubuntu-latest
    needs: [frontend, backend, integration]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        name: frontend-build
        path: frontend/dist
        
    - name: Download backend artifacts
      uses: actions/download-artifact@v4
      with:
        name: backend-build
        path: backend/bin/Release/net8.0
        
    - name: Deploy to Azure (example)
      run: |
        echo "Deploying to staging environment..."
        # Add your deployment commands here
        # Example: az webapp deployment source config-zip --resource-group myResourceGroup --name myAppName --src frontend/dist.zip 